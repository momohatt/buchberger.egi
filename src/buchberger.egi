-- I'm specifying the full path to run this script from another directory
loadFile "/Users/momohatt/egison/buchberger.egi/src-new/polynomial.egi"

reduce eqs poly ord :=
  match (eqs, poly) as (multiset polynomial, polynomial) with
  | (($rule & head #ord #1 $hf) :: _, ($c, mult #hf $m') :: _) ->
    plus poly (mult (c, m') (negate rule))
  | _ -> poly

normalize eqs poly ord :=
  let poly' := reduce eqs poly ord
   in if eq?/m polynomial poly poly'
        then poly
        else normalize eqs poly' ord

assertEqual "normalize"
  (normalize [f1, f2] [(-1, [(x, 2), (y, 1)]), (1, [(x, 1), (y, 2)])] [x, y])
  [(-1, [(x, 2)]), (1, [(y, 2)])]

assertEqual "reduce"
  (reduce [f1, f2] [(1, [(x, 2), (y, 2)])] [x, y])
  [(1, [(y, 1), (x, 2)])]

-- Least Common Multiple
lcm m1 m2 :=
  matchAll (m1, m2) as (monomial, monomial) with
    | (power $x $n1, power #x $n2) -> (x, max [n1, n2])
    | {(     @     , power $x $n),
        power #x #0} -> (x, n)

assertEqual "lcm"
  (lcm [(x, 2), (z, 1)] [(x, 1), (y, 1)])
  [(x, 2), (z, 1), (y, 1)]

sPolynomial f1 f2 ord :=
  match (f1, f2) as (polynomial, polynomial) with
  | (head #ord $c1 $h1, head #ord $c2 $h2) ->
    match lcm h1 h2 as monomial with
    | mult #h1 $m1 & mult #h2 $m2 ->
      plus (mult (1 / c1, m1) f1) (mult (-1 / c2, m2) f2)

assertEqual "s-polynomial"
  (sPolynomial f1 f2 [x, y])
  [(-1, [(y, 1), (x, 2)]), (1, [(x, 1), (y, 2)])]

assertEqual "s-polynomial"
  (sPolynomial [(3, [(x, 3), (y, 1)]) , (2, [(x, 1), (y, 1)])
               , (-1, [(y, 2)])] [(2, [(x, 1), (y, 2)]), (-5, [(y, 3)])] [x, y])
  [(2 / 3 , [(y, 2), (x, 1)]), (-1 / 3, [(y, 3)]), (5 / 2, [(x, 2), (y, 3)])]

report fs pairs :=
  print (S.concat [show (length fs), " equations, ",
                   show (length pairs), " pending pairs" ])

buchbergerLoop pairs fs ord := io do
  report fs pairs
  return (match pairs as list (polynomial, polynomial) with
    | [] -> fs
    | ($p1, $p2) :: $pairs' ->
      let h := normalize fs (sPolynomial p1 p2 ord) ord
       in match h as polynomial with
          | [] -> buchbergerLoop pairs' fs ord
          | head #ord $c _ ->
            -- Normalize h so that head constant becomes 1
            let h' := mult (1 / c, []) h
                newPairs := map (\x -> (x, h')) fs
             in buchbergerLoop (pairs' ++ newPairs)
                               ((debug/fn showPoly h') :: fs)
                               ord)

allPairs fs :=
  matchAll fs as list something with
    | _ ++ $fi :: _ ++ $fj :: _ -> (fi, fj)

-- Make head constant 1
preprocess ord fs :=
  matchAll fs as multiset polynomial with
    | ($f & head #ord $c _) :: _ -> mult (1 / c, []) f

buchberger fs ord :=
  let fs' := preprocess ord fs
   in buchbergerLoop (allPairs fs') fs' ord

assertEqual "preprocess"
  (preprocess [x, y, z] [[(1, [(z, 1)]), (-1, [(x, 1)]), (-1, [(y, 1)])]])
  [[(-1, [(z, 1)]), (1, [(x, 1)]), (1, [(y, 1)])]]

assertEqual "buchberger"
  (map showPoly (buchberger [f1, f2] [x, y]))
  ["y^3 - y^2", "x^2 - y^2", "x^2 y - x^2", "x y^2 - y^2"]

assertEqual "buchberger"
  (map showPoly (buchberger fs1 [x, y, z]))
  ["z - 3", "x - 1", "y - 2", "- z + x + y"]

assertEqual "buchberger"
  (map showPoly (buchberger fs2 [x, y, z]))
  ["z^4 - 10z^2 + 1", "1 / 2z^3 - 11 / 2z + y", "- 1 / 2z^2 + z y - 1 / 2",
   "x^2 - 2", "y^2 - 3", "- z + x + y"]

assertEqual "buchberger"
  (map showPoly (buchberger fs4 [x, y, z]))
  ["- z^2 + y^3", "- y^2 + x z", "x y - z", "x^2 - y", "x^3 - z"]
